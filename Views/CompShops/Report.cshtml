@model Foods_CompShop.Models.CompShop

@{
    ViewData["Title"] = "Report Price Difference";
}

@*<div style="height:8px;font-size:1px;">&nbsp;</div>
<div style="align-items:center;width:98%">
     Client side libs required  
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.1.1/min/dropzone.min.css" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/blueimp-gallery/2.25.2/css/blueimp-gallery.min.css" crossorigin="anonymous">

    <style>
        html {
            font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
        }

        main {
            margin: 20px;
        }

        #gallery-note {
            font-size: smaller
        }

        .blueimp-gallery {
            margin: 25px;
            max-width: 150px;
            padding-bottom: 150px;
        }

        .dropzone {
            border: 3px dashed #00a1f1;
            background: #F0F8FF;
            margin: 25px;
            border-radius: 5px;
            max-width: 400px;
        }

            .dropzone .dz-message {
                font-weight: 200
            }

                .dropzone .dz-message .note {
                    font-family: sans-serif;
                    font-size: 18px;
                    font-weight: 200;
                    display: block;
                    margin-top: 1.5rem;
                }
    </style>

    <script type="text/javascript">
        function timedRefresh(timeoutPeriod) {
            setTimeout(function () {
                location.reload(true);
            }, timeoutPeriod);
        }
    </script>


    <main>

        <div class="box content">
            <hr>
            <div>
                <form action="/api/images/upload"
                      class="dropzone needsclick dz-clickable"
                      id="image-upload"
                      method="post">

                    <div class="dz-message needsclick">
                        <span class="note needsclick">
                            Drop photos/videos for yor idea here or click to upload.
                        </span>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.1.1/min/dropzone.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/blueimp-gallery/2.25.2/js/blueimp-gallery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>



    <script>
        // init gallery for later use
        var gallery;

        // Grab links for images from backend api
        function fetchImageLinks() {
            // Fetch images
            $.get("api/Images/thumbnails", function (fetchedImageLinks) {
                console.log(fetchedImageLinks)

                // Check if anything is in there
                if (_.isEmpty(fetchedImageLinks)) {
                    console.log('empty fetched')
                    // do nothing
                } else {
                    // Check if we have a gallery initialized
                    if (_.isEmpty(gallery)) {
                        // initialize gallery
                        gallery = blueimp.Gallery(
                            fetchedImageLinks, // gallery links array
                            {
                                container: '#blueimp-gallery-carousel',
                                carousel: true
                            } // gallery options
                        );
                    } else {
                        // check if images are equal to array
                        console.log('currently in gallery:')
                        console.log(gallery.list)
                        var imageLinksEqual = _.isEqual(_.sortBy(gallery.list.map(s => s.split("?")[0])), _.sortBy(fetchedImageLinks.map(s => s.split("?")[0])))
                        if (imageLinksEqual) {
                            console.log('images arr are equal')
                            // do nothing
                        } else {
                            console.log('images arr are not equal')

                            // update gallery with new image urls. Only compare actual url without SAS token query string
                            var newImageLinks = _.difference(fetchedImageLinks.map(s => s.split("?")[0]), gallery.list.map(s => s.split("?")[0]))

                            console.log('differene is: ')
                            console.log(newImageLinks)
                            // Only add new images
                            gallery.add(newImageLinks);

                            // Force image load
                            gallery.next();
                        }
                    }
                }
            });
        }

        // Start first interval
        fetchImageLinks()

        setInterval(function () {
            fetchImageLinks()
        }, 5000)

        /* Dropzone */
        // "imageUpload" is the camelized version of the HTML element's ID
        Dropzone.options.imageUpload = {
            paramName: "files", // The name that will be used to transfer the file
            dictDefaultMessage: "Drop photos/videos here or Click to Upload",
            addRemoveLinks: true, // Allows for cancellation of file upload and remove thumbnail
            init: function () {
                myDropzone = this;
                myDropzone.on("success", function (file, response) {
                    console.log("Success");
                    myDropzone.removeFile(file);
                });
            }
        };
    </script>

    <div align="center" class="form-group">
        <a asp -for="imageURL" target="_blank" href="@TempData["uploadedUri"] ">
            <img src="@TempData["uploadedUri"]" width="130" height="130" alt="Image will be shown after upload">
        </a>
    </div>

    <hr />
    <div class="row">
        <div class="col-md-3">
            <form asp-action="Report">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group" style="width:auto">
                    <asp:HiddenField ID="hdnBarcode" runat="server" />
                    <div class="row">
                        <div class="col-lg-10">
                            <label>Scan Barcode</label>
                            <div class="input-group">
                                <input id="scanner_input" name="barcode" class="form-control" placeholder="Click the button to scan barcode" type="text" />
                                <span class="input-group-btn">
                                    <button type="button" data-toggle="modal" data-target="#livestream_scanner" style="background-color:green;width:30px;height:33px">
                                        [||]<i class="fa-barcode"></i>
                                    </button>
                                </span>
                            </div> /input-group 
                        </div> /.col-lg-6 
                    </div> /.row 
                    <div class="modal" id="livestream_scanner">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                    <h4 class="modal-title">Barcode Scanner</h4>
                                </div>
                                <div class="modal-body" style="position: static">
                                    <div id="interactive" class="viewport"></div>
                                    <div class="error"></div>
                                </div>
                                <div class="modal-footer">
                                    <label class="btn btn-default pull-left">
                                        <i class="fa fa-camera"></i> Use camera app
                                        <input type="file" accept="image/*;capture=camera" capture="camera" class="hidden" />
                                    </label>
                                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                                </div>
                            </div> /.modal-content 
                        </div> /.modal-dialog 
                    </div> /.modal 
                </div>
                <div class="form-group">
                    <label>Date</label>
                    <input asp-for="PulledDate" class="form-control" />                    
                </div>
                <div class="form-group">
                    <label>Description/UPC Details</label>
                    <textarea asp-for="@TempData["imageText"]" class="form-control" rows="5"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
                
                <asp:HiddenField ID="hdnfldVariable" runat="server" />

                <div class="form-group">
                    <input type="submit" value="Submit" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>

    <script type="text/javascript" src="~/js/quagga.min.js"></script>
    <style>
        #interactive.viewport {
            position: relative;
            width: 100%;
            height: auto;
            overflow: hidden;
            text-align: center;
        }

            #interactive.viewport > canvas, #interactive.viewport > video {
                max-width: 100%;
                width: 100%;
            }

        canvas.drawing, canvas.drawingBuffer {
            position: absolute;
            left: 0;
            top: 0;
        }
    </style>

    <script type="text/javascript">
        $(function () {
            // Create the QuaggaJS config object for the live stream
            var liveStreamConfig = {
                inputStream: {
                    type: "LiveStream",
                    constraints: {
                        width: { min: 640 },
                        height: { min: 480 },
                        aspectRatio: { min: 1, max: 100 },
                        facingMode: "environment" // or "user" for the front camera
                    }
                },
                locator: {
                    patchSize: "medium",
                    halfSample: true
                },
                numOfWorkers: (navigator.hardwareConcurrency ? navigator.hardwareConcurrency : 4),
                decoder: {
                    "readers": [
                        { "format": "ean_reader", "config": {} }
                    ]
                },
                locate: true
            };
            // The fallback to the file API requires a different inputStream option.
            // The rest is the same
            var fileConfig = $.extend(
                {},
                liveStreamConfig,
                {
                    inputStream: {
                        size: 800
                    }
                }
            );
            // Start the live stream scanner when the modal opens
            $('#livestream_scanner').on('shown.bs.modal', function (e) {
                Quagga.init(
                    liveStreamConfig,
                    function (err) {
                        if (err) {
                            $('#livestream_scanner .modal-body .error').html('<div class="alert alert-danger"><strong><i class="fa fa-exclamation-triangle"></i> ' + err.name + '</strong>: ' + err.message + '</div>');
                            Quagga.stop();
                            return;
                        }
                        Quagga.start();
                    }
                );
            });

            // Make sure, QuaggaJS draws frames an lines around possible
            // barcodes on the live stream
            Quagga.onProcessed(function (result) {
                var drawingCtx = Quagga.canvas.ctx.overlay,
                    drawingCanvas = Quagga.canvas.dom.overlay;

                if (result) {
                    if (result.boxes) {
                        drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute("width")), parseInt(drawingCanvas.getAttribute("height")));
                        result.boxes.filter(function (box) {
                            return box !== result.box;
                        }).forEach(function (box) {
                            Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: "green", lineWidth: 2 });
                        });
                    }

                    if (result.box) {
                        Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: "#00F", lineWidth: 2 });
                    }

                    if (result.codeResult && result.codeResult.code) {
                        Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: 'red', lineWidth: 3 });
                    }
                }
            });

            // Once a barcode had been read successfully, stop quagga and
            // close the modal after a second to let the user notice where
            // the barcode had actually been found.
            Quagga.onDetected(function (result) {
                if (result.codeResult.code) {
                    $('#scanner_input').val(result.codeResult.code);
                    Quagga.stop();
                    setTimeout(function () { $('#livestream_scanner').modal('hide'); }, 1000);
                }
            });

            // Stop quagga in any case, when the modal is closed
            $('#livestream_scanner').on('hide.bs.modal', function () {
                if (Quagga) {
                    Quagga.stop();
                }
            });

            // Call Quagga.decodeSingle() for every file selected in the
            // file input
            $("#livestream_scanner input:file").on("change", function (e) {
                if (e.target.files && e.target.files.length) {
                    Quagga.decodeSingle($.extend({}, fileConfig, { src: URL.createObjectURL(e.target.files[0]) }), function (result) { alert(result.codeResult.code); });
                }
            });
        });


    </script>*@

    <div>
        <a asp-action="Index">Back to List</a>
    </div>

    @section Scripts {
        @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    }
